{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "DEV-IOAN"
		},
		"AzureBlobStorage1_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureBlobStorage1'"
		},
		"AzureBlobStorage2_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureBlobStorage2'"
		},
		"AzureBlobStorage_retailcontainer_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureBlobStorage_retailcontainer'"
		},
		"AzureSqlDatabase1_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureSqlDatabase1'"
		},
		"AzureSqlDatabase2_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureSqlDatabase2'"
		},
		"AzureSqlDestination_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureSqlDestination'"
		},
		"BLOBService_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'BLOBService'"
		},
		"GetTimeAzureFunction_functionKey": {
			"type": "secureString",
			"metadata": "Secure string for 'functionKey' of 'GetTimeAzureFunction'"
		},
		"JiraLinkedService_password": {
			"type": "secureString",
			"metadata": "Secure string for 'password' of 'JiraLinkedService'"
		},
		"SalesforceLinkedService_clientSecret": {
			"type": "secureString",
			"metadata": "Secure string for 'clientSecret' of 'SalesforceLinkedService'"
		},
		"StorageSource_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'StorageSource'"
		},
		"AmazonS3Test_secretAccessKey": {
			"type": "secureString",
			"metadata": "Secure string for 'secretAccessKey' of 'AmazonS3Test'"
		},
		"GetTimeAzureFunction_properties_typeProperties_functionAppUrl": {
			"type": "string",
			"defaultValue": "https://lsaffgettime.azurewebsites.net"
		},
		"JiraLinkedService_properties_typeProperties_host": {
			"type": "string",
			"defaultValue": "https://id.atlassian.com/login"
		},
		"JiraLinkedService_properties_typeProperties_username": {
			"type": "string",
			"defaultValue": "manioan90@gmail.com"
		},
		"MarketStackApi_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "http://api.marketstack.com/v1/"
		},
		"RestService1_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "http://dummy.restapiexample.com/api/v1/employee/"
		},
		"RestServiceUsers_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://jsonplaceholder.typicode.com/users"
		},
		"SalesforceLinkedService_properties_typeProperties_environmentUrl": {
			"type": "string",
			"defaultValue": "https://test.salesforce.com"
		},
		"SalesforceLinkedService_properties_typeProperties_clientId": {
			"type": "string",
			"defaultValue": "Ioan"
		},
		"AmazonS3Test_properties_typeProperties_accessKeyId": {
			"type": "string",
			"defaultValue": "AKIA3X3OBRIRLU5NSKN4"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/IF_Condition')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "If Condition",
						"type": "IfCondition",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@contains(pipeline().parameters.pfile, 'customer')",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "False Wait",
									"type": "Wait",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"waitTimeInSeconds": 1
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "True Wait",
									"type": "Wait",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"waitTimeInSeconds": 1
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"pfile": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Tutorials"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/WriteJsonDataToAzureBlobStorage')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Set variable1",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "myVariable",
							"value": {
								"value": "@pipeline().parameters.myParameter",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Copy data1",
						"type": "Copy",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [
							{
								"activity": "Set variable1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"enableStaging": false
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"myParameter": {
						"type": "string"
					}
				},
				"variables": {
					"myVariable": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Tutorials/Write Json Data to Azure Blob Storage"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureBlobStorage1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('AzureBlobStorage1_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureBlobStorage2')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('AzureBlobStorage2_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureBlobStorage_retailcontainer')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('AzureBlobStorage_retailcontainer_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlDatabase1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('AzureSqlDatabase1_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlDatabase2')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('AzureSqlDatabase2_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlDestination')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('AzureSqlDestination_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/BLOBService')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('BLOBService_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/GetTimeAzureFunction')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureFunction",
				"typeProperties": {
					"functionAppUrl": "[parameters('GetTimeAzureFunction_properties_typeProperties_functionAppUrl')]",
					"functionKey": {
						"type": "SecureString",
						"value": "[parameters('GetTimeAzureFunction_functionKey')]"
					},
					"authentication": "Anonymous"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/JiraLinkedService')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Test Jira linked Service",
				"annotations": [],
				"type": "Jira",
				"typeProperties": {
					"host": "[parameters('JiraLinkedService_properties_typeProperties_host')]",
					"port": 443,
					"username": "[parameters('JiraLinkedService_properties_typeProperties_username')]",
					"password": {
						"type": "SecureString",
						"value": "[parameters('JiraLinkedService_password')]"
					},
					"useEncryptedEndpoints": true,
					"useHostVerification": true,
					"usePeerVerification": true
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/MarketStackApi')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "RestService",
				"typeProperties": {
					"url": "[parameters('MarketStackApi_properties_typeProperties_url')]",
					"enableServerCertificateValidation": true,
					"authenticationType": "Anonymous"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/RestService1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "RestService",
				"typeProperties": {
					"url": "[parameters('RestService1_properties_typeProperties_url')]",
					"enableServerCertificateValidation": true,
					"authenticationType": "Anonymous"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/RestServiceUsers')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "RestService",
				"typeProperties": {
					"url": "[parameters('RestServiceUsers_properties_typeProperties_url')]",
					"enableServerCertificateValidation": true,
					"authenticationType": "Anonymous"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/SalesforceLinkedService')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Linked Service for Salesforce testing domain!!!. To be updated with correct values.",
				"annotations": [],
				"type": "SalesforceV2",
				"typeProperties": {
					"environmentUrl": "[parameters('SalesforceLinkedService_properties_typeProperties_environmentUrl')]",
					"clientId": "[parameters('SalesforceLinkedService_properties_typeProperties_clientId')]",
					"clientSecret": {
						"type": "SecureString",
						"value": "[parameters('SalesforceLinkedService_clientSecret')]"
					},
					"apiVersion": "50.0",
					"authenticationType": "OAuth2ClientCredential"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/StorageSource')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('StorageSource_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AmazonS3Test')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AmazonS3",
				"typeProperties": {
					"serviceUrl": "https://s3.amazonaws.com",
					"accessKeyId": "[parameters('AmazonS3Test_properties_typeProperties_accessKeyId')]",
					"secretAccessKey": {
						"type": "SecureString",
						"value": "[parameters('AmazonS3Test_secretAccessKey')]"
					},
					"authenticationType": "AccessKey"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/1_Azure Function')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Web Activity",
						"type": "WebActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"method": "POST",
							"headers": {},
							"url": "https://bd-eus2-fapp.azurewebsites.net/api/Get",
							"body": "{\ntimezone: \"Eastern Standard Time\"\n}"
						}
					},
					{
						"name": "Call Azure Function",
						"type": "AzureFunctionActivity",
						"dependsOn": [
							{
								"activity": "Web Activity",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"functionName": {
								"value": "Get Time Function",
								"type": "Expression"
							},
							"body": "{\ntimezone: \"Eastern Standard Time\"\n}",
							"headers": {},
							"method": "POST"
						},
						"linkedServiceName": {
							"referenceName": "GetTimeAzureFunction",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "WebHook",
						"type": "WebHook",
						"dependsOn": [
							{
								"activity": "Call Azure Function",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://bd-eus2-fapp.azurewebsites.net/api/Get",
							"method": "POST",
							"headers": {
								"Content-Type": {
									"value": "application/json",
									"type": "Expression"
								}
							},
							"body": {
								"timezone": "Eastern Standard Time"
							},
							"timeout": "00:09:00"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Azure Function in ADF"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/GetTimeAzureFunction')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/2_Azure Function')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Set input for function",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "func",
							"value": "test"
						}
					},
					{
						"name": "Call Azure Function",
						"type": "AzureFunctionActivity",
						"dependsOn": [
							{
								"activity": "Set input for function",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"functionName": "Get Time Function",
							"body": {
								"value": "@variables('func')",
								"type": "Expression"
							},
							"headers": {},
							"method": "POST"
						},
						"linkedServiceName": {
							"referenceName": "GetTimeAzureFunction",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Check Status",
						"type": "Until",
						"dependsOn": [
							{
								"activity": "Call Azure Function",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@activity('Call Azure Function').output",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Wait",
									"type": "Wait",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"waitTimeInSeconds": 5
									}
								},
								{
									"name": "Get Function Status",
									"type": "WebActivity",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"method": "GET",
										"headers": {},
										"url": {
											"value": "@activity('Call Azure Function').output.statusQueryGetUri",
											"type": "Expression"
										}
									}
								}
							],
							"timeout": "0.12:00:00"
						}
					},
					{
						"name": "Set output for function",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Check Status",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "func_o",
							"value": "ok"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"func": {
						"type": "String",
						"defaultValue": "test"
					},
					"func_o": {
						"type": "String",
						"defaultValue": "t"
					}
				},
				"folder": {
					"name": "Azure Function in ADF"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/GetTimeAzureFunction')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Deadlock')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Enable tracing",
						"type": "Script",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase1",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": "DBCC TRACEON (1222, 1204, -1)"
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					},
					{
						"name": "Create tables  insert few records",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "Enable tracing",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase1",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": "-- Create a Sample Tables --\nDROP TABLE IF EXISTS SampleDeadLock_1\n\nGO\nCREATE TABLE SampleDeadLock_1(\n    Item_Code    INT\n    ,Item_Desc    VARCHAR(100)\n    ,Qty        INT\n)\n\nDROP TABLE IF EXISTS SampleDeadLock_2\nGO\n\nCREATE TABLE SampleDeadLock_2(\n    Item_Code    INT\n    ,Item_Desc    VARCHAR(100)\n    ,Qty        INT\n)\n\n-- Insert couple of records to each table --\n\nINSERT INTO dbo.SampleDeadLock_1(\n    Item_Code\n    ,Item_Desc\n    ,Qty\n)\nVALUES\n    (1,'CPU', 10)\n    ,(2, '20 GB - Hard Disk', 20)\n\nINSERT INTO dbo.SampleDeadLock_2(\n    Item_Code\n    ,Item_Desc\n    ,Qty\n)\nVALUES\n    (3,'Monitor', 15)\n    ,(4, 'Keyboard & Mouse', 25)"
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					},
					{
						"name": "Operation 1",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "Create tables  insert few records",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase1",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": "BEGIN TRAN\nUPDATE dbo.SampleDeadLock_1 SET Qty = 100 WHERE Item_Code = 1\nWAITFOR DELAY '00:00:30'\nUPDATE dbo.SampleDeadLock_2 SET Qty = 200 WHERE Item_Code = 3"
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					},
					{
						"name": "Operation 2",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "Operation 1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase1",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": "BEGIN TRAN\n\nWAITFOR DELAY '00:00:10'\n\nUPDATE dbo.SampleDeadLock_2 SET Qty = 300 WHERE Item_Code = 3\nUPDATE dbo.SampleDeadLock_1 SET Qty = 400 WHERE Item_Code = 1"
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Deadlock SQL Server"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase1')]"
			]
		}
	]
}